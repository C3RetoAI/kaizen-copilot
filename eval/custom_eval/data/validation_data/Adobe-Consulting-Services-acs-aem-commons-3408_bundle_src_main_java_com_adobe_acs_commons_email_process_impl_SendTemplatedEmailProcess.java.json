{
  "repo": {
    "name": "Adobe-Consulting-Services/acs-aem-commons",
    "buggy_commit": "a2cf90935d6166680ad85a9ac045e5060bf202ac",
    "fixed_commit": "be4c5995f48fb4b25d56d6b20485d28d62d76479"
  },
  "input": {
    "language": "Java",
    "issue": {
      "issue_title": "Reduce usage of Apache Commons Lang 2",
      "issue_description": "\r\nApache commons lang 2 is not maintained anymore since years. Usage of it should be replaced with Apache Commons Lang 3. Both libraries are part of AEM as a Cloud Service and AEM 6.x, only a change of the imports is required.\r\n\r\nThere is one exception, the usage of AEMs MailTemplate API which currently does not provide an alternative. Once that is available we can change the last remaining usage of Apache commons lang 2.\r\n\r\n\r\n\r\n"
    },
    "buggy_commit_message": "Merge branch 'Adobe-Consulting-Services:master' into master",
    "buggy_file": {
      "buggy_filename": "bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailProcess.java",
      "buggy_code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.adobe.acs.commons.email.process.impl;\n\nimport java.text.SimpleDateFormat;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.jcr.RepositoryException;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.felix.scr.annotations.Activate;\nimport org.apache.felix.scr.annotations.Component;\nimport org.apache.felix.scr.annotations.Deactivate;\nimport org.apache.felix.scr.annotations.Property;\nimport org.apache.felix.scr.annotations.Reference;\nimport org.apache.felix.scr.annotations.Service;\nimport org.apache.jackrabbit.api.security.user.Authorizable;\nimport org.apache.jackrabbit.api.security.user.UserManager;\nimport org.apache.sling.api.resource.LoginException;\nimport org.apache.sling.api.resource.Resource;\nimport org.apache.sling.api.resource.ResourceResolver;\nimport org.apache.sling.api.resource.ResourceResolverFactory;\nimport org.apache.sling.jcr.resource.api.JcrResourceConstants;\nimport org.osgi.service.component.ComponentContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.adobe.acs.commons.email.EmailService;\nimport com.adobe.acs.commons.wcm.AuthorUIHelper;\nimport com.day.cq.commons.Externalizer;\nimport com.day.cq.dam.commons.util.DamUtil;\nimport com.day.cq.workflow.WorkflowException;\nimport com.day.cq.workflow.WorkflowSession;\nimport com.day.cq.workflow.exec.WorkItem;\nimport com.day.cq.workflow.exec.WorkflowData;\nimport com.day.cq.workflow.exec.WorkflowProcess;\nimport com.day.cq.workflow.metadata.MetaDataMap;\n\n/**\n * This abstract <code>SendTemplatedEmailProcess</code> class is a WorkFlow process step\n * that will send an email using {@link com.adobe.acs.commons.email.EmailService EmailService}.\n * By default jcr properties from the payload are automatically added to the email parameter\n * map. If the payload is a cq:Page then the properties at the jcr:content level\n * are added. If the payload is a dam:Asset then the properties at the metadata\n * node are added. In addition the parameters outlined in\n * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants\n * SendTemplatedEmailConstants} are also automatically added. <br>\n * This process will send the email to a CQ user or members of a CQ group\n * specified by the process argument\n * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.Arguments#SEND_TO\n * SEND_TO} Implementing classes can override this logic by overriding the\n * method:\n * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess#getEmailAddrs(com.day.cq.workflow.exec.WorkItem, org.apache.sling.api.resource.Resource, java.lang.String[])\n * getEmailAddrs() - method}<br>\n * Implementing classes can also add additional parameters by overriding the\n * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess#getAdditionalParams(WorkItem, WorkflowSession, Resource)\n * getAdditionalParams() - method}\n * <p>\n * <p>\n * <p>\n * <b>Process Configuration</b> This process supports the following\n * configuration arguments:\n * <dl>\n * <dt><b>emailTemplate</b></dt>\n * <dd>String representing a path to the template to be used to send the email.\n * If no template is set no email is sent.</dd>\n * <dt><b>sendTo</b></dt>\n * <dd>String representing a path to a user or group. If the path is a user an\n * email will be sent to that user. if the path is to a group then the email\n * will be sent to all members of that group.</dd>\n * <dt><b>dateFormat</b></dt>\n * <dd>An optional parameter to specify how jcr Date properties are converted to\n * Strings. The format should be set using the\n * {@link java.text.SimpleDateFormat java.text.SimpleDateFormat}. Defaults to\n * <code>yyyy-MM-dd hh:mm a</code></dd>\n * </dl>\n *\n */\n@Component\n@Property(label = \"Workflow Label\", name = \"process.label\", value = \"Send Templated Email\", description = \"Sends a templated email using the ACS Commons Email Service\")\n@Service\npublic class SendTemplatedEmailProcess implements WorkflowProcess {\n\n    private static final Logger log = LoggerFactory.getLogger(SendTemplatedEmailProcess.class);\n\n    /**\n     * Service used to send the email\n     */\n    @Reference\n    private EmailService emailService;\n\n    /**\n     * Service used to generate a link to the payload on author environment\n     */\n    @Reference\n    private AuthorUIHelper authorUiHelper;\n\n    @Reference\n    private ResourceResolverFactory resourceResolverFactory;\n\n    /**\n     * used to generate a link to the payload on publish environment\n     */\n    @Reference\n    private Externalizer externalizer;\n\n    /**\n     * The available arguments to this process implementation.\n     */\n    protected enum Arguments {\n        PROCESS_ARGS(\"PROCESS_ARGS\"),\n        /**\n         * emailTemplate - process argument\n         */\n        TEMPLATE(\"emailTemplate\"),\n        /**\n         * sendTo - process argument\n         */\n        SEND_TO(\"sendTo\"),\n\n        /**\n         * dateFormat - process argument\n         */\n        DATE_FORMAT(\"dateFormat\");\n\n        private String argumentName;\n\n        Arguments(String argumentName) {\n            this.argumentName = argumentName;\n        }\n\n        public String getArgumentName() {\n            return this.argumentName;\n        }\n\n    }\n\n    @Override\n    public final void execute(WorkItem workItem, WorkflowSession workflowSession, MetaDataMap metaData)\n            throws WorkflowException {\n\n        final WorkflowData workflowData = workItem.getWorkflowData();\n        final String type = workflowData.getPayloadType();\n\n        // Check if the payload is a path in the JCR\n        if (!StringUtils.equals(type, \"JCR_PATH\")) {\n            return;\n        }\n\n        String[] args = buildArguments(metaData);\n\n        // process arguments\n        String emailTemplate = getValueFromArgs(Arguments.TEMPLATE.getArgumentName(), args);\n\n        if (emailTemplate == null) {\n            log.warn(\"Invalid process arguments, returning\");\n            return;\n        }\n\n        // set date format to be used in emails\n        String sdfParam = getValueFromArgs(Arguments.DATE_FORMAT.getArgumentName(), args);\n        SimpleDateFormat sdf = getSimpleDateFormat(sdfParam);\n\n        // Get the path to the JCR resource from the payload\n        final String payloadPath = workflowData.getPayload().toString();\n\n        // Get ResourceResolver\n        final Map<String, Object> authInfo = new HashMap<String, Object>();\n        authInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, workflowSession.getSession());\n\n        try (ResourceResolver resourceResolver = resourceResolverFactory.getResourceResolver(authInfo) ) {\n            Resource payloadRes = resourceResolver.getResource(payloadPath);\n\n            // Email Parameter map\n            Map<String, String> emailParams = new HashMap<String, String>();\n\n            // Set jcr path\n            emailParams.put(SendTemplatedEmailConstants.JCR_PATH, payloadPath);\n\n            // Get Payload params\n            Map<String, String> payloadProp = SendTemplatedEmailUtils.getPayloadProperties(payloadRes, sdf);\n            if (payloadProp != null) {\n                emailParams.putAll(payloadProp);\n            }\n\n            // Get Url params\n            Map<String, String> urlParams = getUrls(payloadRes);\n            emailParams.putAll(urlParams);\n\n            // Get Additional Parameters to add\n            Map<String, String> wfParams = getAdditionalParams(workItem, workflowSession, payloadRes);\n            emailParams.putAll(wfParams);\n\n            // get email addresses based on CQ user or group\n            String[] emailTo = getEmailAddrs(workItem, payloadRes, args);\n\n            List<String> failureList = emailService.sendEmail(emailTemplate, emailParams, emailTo);\n\n            if (failureList.isEmpty()) {\n                log.info(\"Email sent successfully to {} recipients\", emailTo.length);\n            } else {\n                log.error(\"Email sent failed\");\n            }\n\n        } catch (LoginException e) {\n            log.error(\"Could not acquire a ResourceResolver object from the Workflow Session's JCR Session: {}\", e);\n        }\n    }\n\n    /***\n     * Gets a String[] of email addresses to send the email to. By default calls\n     * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils#getEmailAddrsFromUserPath(ResourceResolver, String)}\n     * Protected so that it can be overridden by implementing classes to add\n     * unique logic to where emails are routed to.\n     *\n     * @param workItem\n     *            the current WorkItem in the workflow\n     * @param payloadResource\n     *            the current payload as a Resource\n     * @param args\n     *            process arguments configured by the workflow step\n     * @return String[] of email addresses\n     */\n    protected String[] getEmailAddrs(WorkItem workItem, Resource payloadResource, String[] args) {\n        ResourceResolver resolver = payloadResource.getResourceResolver();\n        String sendToUser = getValueFromArgs(Arguments.SEND_TO.getArgumentName(), args);\n        return SendTemplatedEmailUtils.getEmailAddrsFromPathOrName(resolver, sendToUser);\n    }\n\n    /***\n     * Returns a Map<String, String> of additional parameters that will be added\n     * to the full list of email parameters that is sent to the EmailService. By\n     * default adds the Workflow Title:\n     * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants#WF_MODEL_TITLE\n     * WF_MODEL_TITLE} and adds the Workflow Step Title:\n     * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants#WF_STEP_TITLE\n     * WF_STEP_TITLE}\n     * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants#WF_INITIATOR\n     * WF_INITIATOR} Protected so that implementing classes can override and\n     * add additional parameters.\n     *\n     * @param workItem\n     * @param workflowSession\n     * @param payloadResource\n     * @return Map<String, String> of additional parameters to be added to email\n     *         params\n     */\n    protected Map<String, String> getAdditionalParams(WorkItem workItem, WorkflowSession workflowSession,\n            Resource payloadResource) {\n        Map<String, String> wfParams = new HashMap<String, String>();\n\n        try {\n            wfParams.put(SendTemplatedEmailConstants.WF_STEP_TITLE, workItem.getNode().getTitle());\n            wfParams.put(SendTemplatedEmailConstants.WF_MODEL_TITLE, workItem.getWorkflow().getWorkflowModel()\n                    .getTitle());\n            // Set workflow initiator\n            wfParams.put(SendTemplatedEmailConstants.WF_INITIATOR, workItem.getWorkflow().getInitiator());\n            \n            if(workItem.getMetaDataMap().containsKey(\"comment\")) {\n                wfParams.put(SendTemplatedEmailConstants.WF_STEP_COMMENT, workItem.getMetaDataMap().get(\"comment\").toString());\n            }\n        } catch (Exception e) {\n            log.warn(\"Error getting workflow title and workflow step title {}\", e);\n        }\n\n        return wfParams;\n    }\n\n    /***\n     * Gets value from workflow process arguments\n     *\n     * @param key\n     * @param arguments\n     * @return String of the argument value or null if not found\n     */\n    protected String getValueFromArgs(String key, String[] arguments) {\n        for (String str : arguments) {\n            String trimmedStr = str.trim();\n            if (trimmedStr.startsWith(key + \":\")) {\n                return trimmedStr.substring((key + \":\").length());\n            }\n        }\n        return null;\n    }\n\n    /***\n     * Uses the AuthorUIHelper to generate links to the payload on author Uses\n     * Externalizer to generate links to the payload on publish\n     *\n     * @param payloadRes\n     * @return\n     */\n    private Map<String, String> getUrls(Resource payloadRes) {\n\n        Map<String, String> urlParams = new HashMap<String, String>();\n        if (payloadRes == null) {\n            return urlParams;\n        }\n\n        String payloadPath = payloadRes.getPath();\n        ResourceResolver resolver = payloadRes.getResourceResolver();\n\n        if (DamUtil.isAsset(payloadRes)) {\n            // add author url\n            String assetDetailsUrl = authorUiHelper.generateEditAssetLink(payloadPath, true, resolver);\n            urlParams.put(SendTemplatedEmailConstants.AUTHOR_LINK, assetDetailsUrl);\n\n            // add publish url\n            String publishUrl = externalizer.publishLink(resolver, payloadPath);\n            urlParams.put(SendTemplatedEmailConstants.PUBLISH_LINK, publishUrl);\n\n        } else {\n\n            // add absolute author url\n            String assetDetailsUrl = authorUiHelper.generateEditPageLink(payloadPath, true, resolver);\n            urlParams.put(SendTemplatedEmailConstants.AUTHOR_LINK, assetDetailsUrl);\n\n            // add publish url\n            String publishUrl = externalizer.publishLink(resolver, payloadPath + \".html\");\n            urlParams.put(SendTemplatedEmailConstants.PUBLISH_LINK, publishUrl);\n        }\n\n        return urlParams;\n    }\n\n    /***\n     *\n     * @param metaData\n     * @return\n     */\n    private String[] buildArguments(MetaDataMap metaData) {\n        // the 'old' way, ensures backward compatibility\n        String processArgs = metaData.get(Arguments.PROCESS_ARGS.getArgumentName(), String.class);\n        if (processArgs != null && !processArgs.equals(\"\")) {\n            return processArgs.split(\",\");\n        } else {\n            return new String[0];\n        }\n    }\n\n    /***\n     * Set the format to be used for displaying dates in the email Defaults to\n     * format of 'yyyy-MM-dd hh:mm a'\n     *\n     * @param formatString\n     *            - workflow process argument to override default format\n     * @return SimpleDateFormat that will be used to convert jcr Date properties\n     *         to Strings\n     */\n    private SimpleDateFormat getSimpleDateFormat(String formatString) {\n        SimpleDateFormat defaultFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm a\");\n\n        if (formatString == null || formatString.isEmpty()) {\n            return defaultFormat;\n        }\n\n        try {\n            return new SimpleDateFormat(formatString);\n        } catch (IllegalArgumentException e) {\n            // invalid pattern\n            return defaultFormat;\n        }\n    }\n\n    @Activate\n    protected void activate(ComponentContext context) throws RepositoryException {\n        // activate\n    }\n\n    @Deactivate\n    protected void deactivate(ComponentContext context) {\n        // deactivate\n    }\n\n}\n"
    },
    "context": [
      {
        "filename": "bundle/src/main/java/com/adobe/acs/commons/email/EmailService.java",
        "code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.adobe.acs.commons.email;\n\nimport org.osgi.annotation.versioning.ProviderType;\n\nimport javax.activation.DataSource;\nimport javax.mail.internet.InternetAddress;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * A service interface for sending a generic template based Email Notification.\n *\n * The mailType is set to HTMLEmail by default if there are any attachments. Since we are using\n * the template to determine the mailType, the template name has to be *.html.\n *\n * Here is an example to send an email with attachments:\n *\n *      String attachment1 = \"This text should be in the attache txt file.\"\n *      Map&lt;String, DataSource&gt; attachments = new HashMap&lt;&gt;();\n *      attachments.put(\"attachment1.txt\", new ByteArrayDataSource(attachment1, \"text/plain\"));\n *      ...\n *      ...\n *      List&lt;String&gt; participantList = emailService.sendEmail(htmlEmailTemplatePath, emailParams, attachments, key);\n */\n@ProviderType\npublic interface EmailService {\n\n    /**\n     * Construct an email based on a template and send it to one or more\n     * recipients.\n     * \n     * @param templatePath Absolute path of the template used to send the email.\n     * @param emailParams Replacement variable map to be injected in the template\n     * @param recipients recipient email addresses\n     * \n     * @return failureList containing list recipient's InternetAddresses for which email sent failed\n     */\n    List<InternetAddress> sendEmail(String templatePath, Map<String, String> emailParams,\n        InternetAddress... recipients);\n\n    /**\n     * Construct an email based on a template and send it to one or more\n     * recipients.\n     * \n     * @param templatePath Absolute path of the template used to send the email.\n     * @param emailParams Replacement variable map to be injected in the template\n     * @param recipients recipient email addresses. Invalid email addresses are skipped.\n     * \n     * @return failureList containing list recipient's String addresses for which email sent failed\n     */\n    List<String> sendEmail(String templatePath, Map<String, String> emailParams, String... recipients);\n\n    /**\n     * Construct an email with attachments based on a template and send it to one or more\n     * recipients.\n     *\n     * @param templatePath Absolute path of the template used to send the email.\n     * @param emailParams Replacement variable map to be injected in the template\n     * @param attachments attachments map with file name\n     * @param recipients recipient email addresses\n     * @return failureList containing list recipient's String addresses for which email sent failed\n     */\n    List<InternetAddress> sendEmail(String templatePath, Map<String, String> emailParams, Map<String, DataSource> attachments, InternetAddress... recipients);\n\n    /**\n     * Construct an email with attachments based on a template and send it to one or more\n     * recipients.\n     *\n     * @param templatePath Absolute path of the template used to send the email.\n     * @param emailParams Replacement variable map to be injected in the template\n     * @param attachments attachments map with file name\n     * @param recipients recipient email addresses\n     * @return failureList containing list recipient's String addresses for which email sent failed\n     */\n    List<String> sendEmail(String templatePath, Map<String, String> emailParams, Map<String, DataSource> attachments, String... recipients);\n}\n"
      },
      {
        "filename": "bundle/src/main/java/com/adobe/acs/commons/wcm/AuthorUIHelper.java",
        "code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.adobe.acs.commons.wcm;\n\nimport org.apache.sling.api.resource.ResourceResolver;\nimport org.osgi.annotation.versioning.ProviderType;\n\n/**\n * A Service that provides centralized logic for generating links to edit Pages\n * and Assets on the author environment. Driven based on an OSGi configuration\n * that allows each implementation to toggle whether to generate links to the\n * Touch UI or Classic UI. Uses the {@link com.day.cq.commons.Externalizer\n * com.day.cq.commons.Externalizer} to create absolute URLs.\n */\n@ProviderType\npublic interface AuthorUIHelper {\n\n    /**\n     * Indicates whether the author experience is using the Touch UI or Classic\n     * UI\n     * \n     * @return true if configured to use Touch UI\n     * \n     */\n    boolean isTouchUI();\n\n    /***\n     * Generates a URL to edit a page in AEM author environment. Will return a\n     * url using either the classic or touch UI url based on configuration\n     * properties. Defaults to Touch UI ('/editor.html') appends the '.html'\n     * extension to the returned URL String\n     * \n     * @param pagePath\n     *            the path to the page\n     * @param absoluteUrl\n     *            if set to true will use the Externalizer to generate an\n     *            absolute Url with author hostname\n     * @param resolver\n     *            used by the {@link com.day.cq.commons.Externalizer\n     *            Externalizer} for resource mapping, can be passed as null to\n     *            avoid extra processing.\n     * @return - returns a relative or absolute URL to edit the passed in page\n     *         path\n     */\n    String generateEditPageLink(String pagePath, boolean absoluteUrl, ResourceResolver resolver);\n\n    /***\n     * Generates a URL to edit a DAM asset in AEM author environment. Will\n     * return a url using either the classic or touch UI url based on\n     * configuration properties. Defaults to Touch UI ('/assetdetails.html')\n     * \n     * @param assetPath\n     *            the path to the asset in the DAM\n     * @param absoluteUrl\n     *            if set to true will use the Externalizer to generate an\n     *            absolute Url with author hostname\n     * @param resolver\n     *            used by the {@link com.day.cq.commons.Externalizer\n     *            Externalizer} for resource mapping, can be passed as null to\n     *            avoid extra processing.\n     * @return - returns a relative or absolute URL to edit the passed in asset\n     *         path\n     */\n    String generateEditAssetLink(String assetPath, boolean absoluteUrl, ResourceResolver resolver);\n}\n"
      }
    ],
    "unresolved_context": [
      "java.text.SimpleDateFormat",
      "java.util.HashMap",
      "java.util.List",
      "java.util.Map",
      "javax.jcr.RepositoryException",
      "org.apache.commons.lang.StringUtils",
      "org.apache.felix.scr.annotations.Activate",
      "org.apache.felix.scr.annotations.Component",
      "org.apache.felix.scr.annotations.Deactivate",
      "org.apache.felix.scr.annotations.Property",
      "org.apache.felix.scr.annotations.Reference",
      "org.apache.felix.scr.annotations.Service",
      "org.apache.jackrabbit.api.security.user.Authorizable",
      "org.apache.jackrabbit.api.security.user.UserManager",
      "org.apache.sling.api.resource.LoginException",
      "org.apache.sling.api.resource.Resource",
      "org.apache.sling.api.resource.ResourceResolver",
      "org.apache.sling.api.resource.ResourceResolverFactory",
      "org.apache.sling.jcr.resource.api.JcrResourceConstants",
      "org.osgi.service.component.ComponentContext",
      "org.slf4j.Logger",
      "org.slf4j.LoggerFactory",
      "com.day.cq.commons.Externalizer",
      "com.day.cq.dam.commons.util.DamUtil",
      "com.day.cq.workflow.WorkflowException",
      "com.day.cq.workflow.WorkflowSession",
      "com.day.cq.workflow.exec.WorkItem",
      "com.day.cq.workflow.exec.WorkflowData",
      "com.day.cq.workflow.exec.WorkflowProcess",
      "com.day.cq.workflow.metadata.MetaDataMap"
    ]
  },
  "output": {
    "language": "Java",
    "fixed_commit_message": "Reduce usage of Apache Commons Lang 2\nThis fixes #3408",
    "fixed_file": {
      "fixed_filename": "bundle/src/main/java/com/adobe/acs/commons/email/process/impl/SendTemplatedEmailProcess.java",
      "fixed_code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.adobe.acs.commons.email.process.impl;\n\nimport java.text.SimpleDateFormat;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.jcr.RepositoryException;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.felix.scr.annotations.Activate;\nimport org.apache.felix.scr.annotations.Component;\nimport org.apache.felix.scr.annotations.Deactivate;\nimport org.apache.felix.scr.annotations.Property;\nimport org.apache.felix.scr.annotations.Reference;\nimport org.apache.felix.scr.annotations.Service;\nimport org.apache.jackrabbit.api.security.user.Authorizable;\nimport org.apache.jackrabbit.api.security.user.UserManager;\nimport org.apache.sling.api.resource.LoginException;\nimport org.apache.sling.api.resource.Resource;\nimport org.apache.sling.api.resource.ResourceResolver;\nimport org.apache.sling.api.resource.ResourceResolverFactory;\nimport org.apache.sling.jcr.resource.api.JcrResourceConstants;\nimport org.osgi.service.component.ComponentContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.adobe.acs.commons.email.EmailService;\nimport com.adobe.acs.commons.wcm.AuthorUIHelper;\nimport com.day.cq.commons.Externalizer;\nimport com.day.cq.dam.commons.util.DamUtil;\nimport com.day.cq.workflow.WorkflowException;\nimport com.day.cq.workflow.WorkflowSession;\nimport com.day.cq.workflow.exec.WorkItem;\nimport com.day.cq.workflow.exec.WorkflowData;\nimport com.day.cq.workflow.exec.WorkflowProcess;\nimport com.day.cq.workflow.metadata.MetaDataMap;\n\n/**\n * This abstract <code>SendTemplatedEmailProcess</code> class is a WorkFlow process step\n * that will send an email using {@link com.adobe.acs.commons.email.EmailService EmailService}.\n * By default jcr properties from the payload are automatically added to the email parameter\n * map. If the payload is a cq:Page then the properties at the jcr:content level\n * are added. If the payload is a dam:Asset then the properties at the metadata\n * node are added. In addition the parameters outlined in\n * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants\n * SendTemplatedEmailConstants} are also automatically added. <br>\n * This process will send the email to a CQ user or members of a CQ group\n * specified by the process argument\n * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess.Arguments#SEND_TO\n * SEND_TO} Implementing classes can override this logic by overriding the\n * method:\n * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess#getEmailAddrs(com.day.cq.workflow.exec.WorkItem, org.apache.sling.api.resource.Resource, java.lang.String[])\n * getEmailAddrs() - method}<br>\n * Implementing classes can also add additional parameters by overriding the\n * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailProcess#getAdditionalParams(WorkItem, WorkflowSession, Resource)\n * getAdditionalParams() - method}\n * <p>\n * <p>\n * <p>\n * <b>Process Configuration</b> This process supports the following\n * configuration arguments:\n * <dl>\n * <dt><b>emailTemplate</b></dt>\n * <dd>String representing a path to the template to be used to send the email.\n * If no template is set no email is sent.</dd>\n * <dt><b>sendTo</b></dt>\n * <dd>String representing a path to a user or group. If the path is a user an\n * email will be sent to that user. if the path is to a group then the email\n * will be sent to all members of that group.</dd>\n * <dt><b>dateFormat</b></dt>\n * <dd>An optional parameter to specify how jcr Date properties are converted to\n * Strings. The format should be set using the\n * {@link java.text.SimpleDateFormat java.text.SimpleDateFormat}. Defaults to\n * <code>yyyy-MM-dd hh:mm a</code></dd>\n * </dl>\n *\n */\n@Component\n@Property(label = \"Workflow Label\", name = \"process.label\", value = \"Send Templated Email\", description = \"Sends a templated email using the ACS Commons Email Service\")\n@Service\npublic class SendTemplatedEmailProcess implements WorkflowProcess {\n\n    private static final Logger log = LoggerFactory.getLogger(SendTemplatedEmailProcess.class);\n\n    /**\n     * Service used to send the email\n     */\n    @Reference\n    private EmailService emailService;\n\n    /**\n     * Service used to generate a link to the payload on author environment\n     */\n    @Reference\n    private AuthorUIHelper authorUiHelper;\n\n    @Reference\n    private ResourceResolverFactory resourceResolverFactory;\n\n    /**\n     * used to generate a link to the payload on publish environment\n     */\n    @Reference\n    private Externalizer externalizer;\n\n    /**\n     * The available arguments to this process implementation.\n     */\n    protected enum Arguments {\n        PROCESS_ARGS(\"PROCESS_ARGS\"),\n        /**\n         * emailTemplate - process argument\n         */\n        TEMPLATE(\"emailTemplate\"),\n        /**\n         * sendTo - process argument\n         */\n        SEND_TO(\"sendTo\"),\n\n        /**\n         * dateFormat - process argument\n         */\n        DATE_FORMAT(\"dateFormat\");\n\n        private String argumentName;\n\n        Arguments(String argumentName) {\n            this.argumentName = argumentName;\n        }\n\n        public String getArgumentName() {\n            return this.argumentName;\n        }\n\n    }\n\n    @Override\n    public final void execute(WorkItem workItem, WorkflowSession workflowSession, MetaDataMap metaData)\n            throws WorkflowException {\n\n        final WorkflowData workflowData = workItem.getWorkflowData();\n        final String type = workflowData.getPayloadType();\n\n        // Check if the payload is a path in the JCR\n        if (!StringUtils.equals(type, \"JCR_PATH\")) {\n            return;\n        }\n\n        String[] args = buildArguments(metaData);\n\n        // process arguments\n        String emailTemplate = getValueFromArgs(Arguments.TEMPLATE.getArgumentName(), args);\n\n        if (emailTemplate == null) {\n            log.warn(\"Invalid process arguments, returning\");\n            return;\n        }\n\n        // set date format to be used in emails\n        String sdfParam = getValueFromArgs(Arguments.DATE_FORMAT.getArgumentName(), args);\n        SimpleDateFormat sdf = getSimpleDateFormat(sdfParam);\n\n        // Get the path to the JCR resource from the payload\n        final String payloadPath = workflowData.getPayload().toString();\n\n        // Get ResourceResolver\n        final Map<String, Object> authInfo = new HashMap<String, Object>();\n        authInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, workflowSession.getSession());\n\n        try (ResourceResolver resourceResolver = resourceResolverFactory.getResourceResolver(authInfo) ) {\n            Resource payloadRes = resourceResolver.getResource(payloadPath);\n\n            // Email Parameter map\n            Map<String, String> emailParams = new HashMap<String, String>();\n\n            // Set jcr path\n            emailParams.put(SendTemplatedEmailConstants.JCR_PATH, payloadPath);\n\n            // Get Payload params\n            Map<String, String> payloadProp = SendTemplatedEmailUtils.getPayloadProperties(payloadRes, sdf);\n            if (payloadProp != null) {\n                emailParams.putAll(payloadProp);\n            }\n\n            // Get Url params\n            Map<String, String> urlParams = getUrls(payloadRes);\n            emailParams.putAll(urlParams);\n\n            // Get Additional Parameters to add\n            Map<String, String> wfParams = getAdditionalParams(workItem, workflowSession, payloadRes);\n            emailParams.putAll(wfParams);\n\n            // get email addresses based on CQ user or group\n            String[] emailTo = getEmailAddrs(workItem, payloadRes, args);\n\n            List<String> failureList = emailService.sendEmail(emailTemplate, emailParams, emailTo);\n\n            if (failureList.isEmpty()) {\n                log.info(\"Email sent successfully to {} recipients\", emailTo.length);\n            } else {\n                log.error(\"Email sent failed\");\n            }\n\n        } catch (LoginException e) {\n            log.error(\"Could not acquire a ResourceResolver object from the Workflow Session's JCR Session: {}\", e);\n        }\n    }\n\n    /***\n     * Gets a String[] of email addresses to send the email to. By default calls\n     * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailUtils#getEmailAddrsFromUserPath(ResourceResolver, String)}\n     * Protected so that it can be overridden by implementing classes to add\n     * unique logic to where emails are routed to.\n     *\n     * @param workItem\n     *            the current WorkItem in the workflow\n     * @param payloadResource\n     *            the current payload as a Resource\n     * @param args\n     *            process arguments configured by the workflow step\n     * @return String[] of email addresses\n     */\n    protected String[] getEmailAddrs(WorkItem workItem, Resource payloadResource, String[] args) {\n        ResourceResolver resolver = payloadResource.getResourceResolver();\n        String sendToUser = getValueFromArgs(Arguments.SEND_TO.getArgumentName(), args);\n        return SendTemplatedEmailUtils.getEmailAddrsFromPathOrName(resolver, sendToUser);\n    }\n\n    /***\n     * Returns a Map<String, String> of additional parameters that will be added\n     * to the full list of email parameters that is sent to the EmailService. By\n     * default adds the Workflow Title:\n     * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants#WF_MODEL_TITLE\n     * WF_MODEL_TITLE} and adds the Workflow Step Title:\n     * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants#WF_STEP_TITLE\n     * WF_STEP_TITLE}\n     * {@link com.adobe.acs.commons.email.process.impl.SendTemplatedEmailConstants#WF_INITIATOR\n     * WF_INITIATOR} Protected so that implementing classes can override and\n     * add additional parameters.\n     *\n     * @param workItem\n     * @param workflowSession\n     * @param payloadResource\n     * @return Map<String, String> of additional parameters to be added to email\n     *         params\n     */\n    protected Map<String, String> getAdditionalParams(WorkItem workItem, WorkflowSession workflowSession,\n            Resource payloadResource) {\n        Map<String, String> wfParams = new HashMap<String, String>();\n\n        try {\n            wfParams.put(SendTemplatedEmailConstants.WF_STEP_TITLE, workItem.getNode().getTitle());\n            wfParams.put(SendTemplatedEmailConstants.WF_MODEL_TITLE, workItem.getWorkflow().getWorkflowModel()\n                    .getTitle());\n            // Set workflow initiator\n            wfParams.put(SendTemplatedEmailConstants.WF_INITIATOR, workItem.getWorkflow().getInitiator());\n            \n            if(workItem.getMetaDataMap().containsKey(\"comment\")) {\n                wfParams.put(SendTemplatedEmailConstants.WF_STEP_COMMENT, workItem.getMetaDataMap().get(\"comment\").toString());\n            }\n        } catch (Exception e) {\n            log.warn(\"Error getting workflow title and workflow step title {}\", e);\n        }\n\n        return wfParams;\n    }\n\n    /***\n     * Gets value from workflow process arguments\n     *\n     * @param key\n     * @param arguments\n     * @return String of the argument value or null if not found\n     */\n    protected String getValueFromArgs(String key, String[] arguments) {\n        for (String str : arguments) {\n            String trimmedStr = str.trim();\n            if (trimmedStr.startsWith(key + \":\")) {\n                return trimmedStr.substring((key + \":\").length());\n            }\n        }\n        return null;\n    }\n\n    /***\n     * Uses the AuthorUIHelper to generate links to the payload on author Uses\n     * Externalizer to generate links to the payload on publish\n     *\n     * @param payloadRes\n     * @return\n     */\n    private Map<String, String> getUrls(Resource payloadRes) {\n\n        Map<String, String> urlParams = new HashMap<String, String>();\n        if (payloadRes == null) {\n            return urlParams;\n        }\n\n        String payloadPath = payloadRes.getPath();\n        ResourceResolver resolver = payloadRes.getResourceResolver();\n\n        if (DamUtil.isAsset(payloadRes)) {\n            // add author url\n            String assetDetailsUrl = authorUiHelper.generateEditAssetLink(payloadPath, true, resolver);\n            urlParams.put(SendTemplatedEmailConstants.AUTHOR_LINK, assetDetailsUrl);\n\n            // add publish url\n            String publishUrl = externalizer.publishLink(resolver, payloadPath);\n            urlParams.put(SendTemplatedEmailConstants.PUBLISH_LINK, publishUrl);\n\n        } else {\n\n            // add absolute author url\n            String assetDetailsUrl = authorUiHelper.generateEditPageLink(payloadPath, true, resolver);\n            urlParams.put(SendTemplatedEmailConstants.AUTHOR_LINK, assetDetailsUrl);\n\n            // add publish url\n            String publishUrl = externalizer.publishLink(resolver, payloadPath + \".html\");\n            urlParams.put(SendTemplatedEmailConstants.PUBLISH_LINK, publishUrl);\n        }\n\n        return urlParams;\n    }\n\n    /***\n     *\n     * @param metaData\n     * @return\n     */\n    private String[] buildArguments(MetaDataMap metaData) {\n        // the 'old' way, ensures backward compatibility\n        String processArgs = metaData.get(Arguments.PROCESS_ARGS.getArgumentName(), String.class);\n        if (processArgs != null && !processArgs.equals(\"\")) {\n            return processArgs.split(\",\");\n        } else {\n            return new String[0];\n        }\n    }\n\n    /***\n     * Set the format to be used for displaying dates in the email Defaults to\n     * format of 'yyyy-MM-dd hh:mm a'\n     *\n     * @param formatString\n     *            - workflow process argument to override default format\n     * @return SimpleDateFormat that will be used to convert jcr Date properties\n     *         to Strings\n     */\n    private SimpleDateFormat getSimpleDateFormat(String formatString) {\n        SimpleDateFormat defaultFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm a\");\n\n        if (formatString == null || formatString.isEmpty()) {\n            return defaultFormat;\n        }\n\n        try {\n            return new SimpleDateFormat(formatString);\n        } catch (IllegalArgumentException e) {\n            // invalid pattern\n            return defaultFormat;\n        }\n    }\n\n    @Activate\n    protected void activate(ComponentContext context) throws RepositoryException {\n        // activate\n    }\n\n    @Deactivate\n    protected void deactivate(ComponentContext context) {\n        // deactivate\n    }\n\n}\n"
    },
    "context": [
      {
        "filename": "bundle/src/main/java/com/adobe/acs/commons/email/EmailService.java",
        "code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.adobe.acs.commons.email;\n\nimport org.osgi.annotation.versioning.ProviderType;\n\nimport javax.activation.DataSource;\nimport javax.mail.internet.InternetAddress;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * A service interface for sending a generic template based Email Notification.\n *\n * The mailType is set to HTMLEmail by default if there are any attachments. Since we are using\n * the template to determine the mailType, the template name has to be *.html.\n *\n * Here is an example to send an email with attachments:\n *\n *      String attachment1 = \"This text should be in the attache txt file.\"\n *      Map&lt;String, DataSource&gt; attachments = new HashMap&lt;&gt;();\n *      attachments.put(\"attachment1.txt\", new ByteArrayDataSource(attachment1, \"text/plain\"));\n *      ...\n *      ...\n *      List&lt;String&gt; participantList = emailService.sendEmail(htmlEmailTemplatePath, emailParams, attachments, key);\n */\n@ProviderType\npublic interface EmailService {\n\n    /**\n     * Construct an email based on a template and send it to one or more\n     * recipients.\n     * \n     * @param templatePath Absolute path of the template used to send the email.\n     * @param emailParams Replacement variable map to be injected in the template\n     * @param recipients recipient email addresses\n     * \n     * @return failureList containing list recipient's InternetAddresses for which email sent failed\n     */\n    List<InternetAddress> sendEmail(String templatePath, Map<String, String> emailParams,\n        InternetAddress... recipients);\n\n    /**\n     * Construct an email based on a template and send it to one or more\n     * recipients.\n     * \n     * @param templatePath Absolute path of the template used to send the email.\n     * @param emailParams Replacement variable map to be injected in the template\n     * @param recipients recipient email addresses. Invalid email addresses are skipped.\n     * \n     * @return failureList containing list recipient's String addresses for which email sent failed\n     */\n    List<String> sendEmail(String templatePath, Map<String, String> emailParams, String... recipients);\n\n    /**\n     * Construct an email with attachments based on a template and send it to one or more\n     * recipients.\n     *\n     * @param templatePath Absolute path of the template used to send the email.\n     * @param emailParams Replacement variable map to be injected in the template\n     * @param attachments attachments map with file name\n     * @param recipients recipient email addresses\n     * @return failureList containing list recipient's String addresses for which email sent failed\n     */\n    List<InternetAddress> sendEmail(String templatePath, Map<String, String> emailParams, Map<String, DataSource> attachments, InternetAddress... recipients);\n\n    /**\n     * Construct an email with attachments based on a template and send it to one or more\n     * recipients.\n     *\n     * @param templatePath Absolute path of the template used to send the email.\n     * @param emailParams Replacement variable map to be injected in the template\n     * @param attachments attachments map with file name\n     * @param recipients recipient email addresses\n     * @return failureList containing list recipient's String addresses for which email sent failed\n     */\n    List<String> sendEmail(String templatePath, Map<String, String> emailParams, Map<String, DataSource> attachments, String... recipients);\n}\n"
      },
      {
        "filename": "bundle/src/main/java/com/adobe/acs/commons/wcm/AuthorUIHelper.java",
        "code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.adobe.acs.commons.wcm;\n\nimport org.apache.sling.api.resource.ResourceResolver;\nimport org.osgi.annotation.versioning.ProviderType;\n\n/**\n * A Service that provides centralized logic for generating links to edit Pages\n * and Assets on the author environment. Driven based on an OSGi configuration\n * that allows each implementation to toggle whether to generate links to the\n * Touch UI or Classic UI. Uses the {@link com.day.cq.commons.Externalizer\n * com.day.cq.commons.Externalizer} to create absolute URLs.\n */\n@ProviderType\npublic interface AuthorUIHelper {\n\n    /**\n     * Indicates whether the author experience is using the Touch UI or Classic\n     * UI\n     * \n     * @return true if configured to use Touch UI\n     * \n     */\n    boolean isTouchUI();\n\n    /***\n     * Generates a URL to edit a page in AEM author environment. Will return a\n     * url using either the classic or touch UI url based on configuration\n     * properties. Defaults to Touch UI ('/editor.html') appends the '.html'\n     * extension to the returned URL String\n     * \n     * @param pagePath\n     *            the path to the page\n     * @param absoluteUrl\n     *            if set to true will use the Externalizer to generate an\n     *            absolute Url with author hostname\n     * @param resolver\n     *            used by the {@link com.day.cq.commons.Externalizer\n     *            Externalizer} for resource mapping, can be passed as null to\n     *            avoid extra processing.\n     * @return - returns a relative or absolute URL to edit the passed in page\n     *         path\n     */\n    String generateEditPageLink(String pagePath, boolean absoluteUrl, ResourceResolver resolver);\n\n    /***\n     * Generates a URL to edit a DAM asset in AEM author environment. Will\n     * return a url using either the classic or touch UI url based on\n     * configuration properties. Defaults to Touch UI ('/assetdetails.html')\n     * \n     * @param assetPath\n     *            the path to the asset in the DAM\n     * @param absoluteUrl\n     *            if set to true will use the Externalizer to generate an\n     *            absolute Url with author hostname\n     * @param resolver\n     *            used by the {@link com.day.cq.commons.Externalizer\n     *            Externalizer} for resource mapping, can be passed as null to\n     *            avoid extra processing.\n     * @return - returns a relative or absolute URL to edit the passed in asset\n     *         path\n     */\n    String generateEditAssetLink(String assetPath, boolean absoluteUrl, ResourceResolver resolver);\n}\n"
      }
    ],
    "unresolved_context": [
      "java.text.SimpleDateFormat",
      "java.util.HashMap",
      "java.util.List",
      "java.util.Map",
      "javax.jcr.RepositoryException",
      "org.apache.commons.lang3.StringUtils",
      "org.apache.felix.scr.annotations.Activate",
      "org.apache.felix.scr.annotations.Component",
      "org.apache.felix.scr.annotations.Deactivate",
      "org.apache.felix.scr.annotations.Property",
      "org.apache.felix.scr.annotations.Reference",
      "org.apache.felix.scr.annotations.Service",
      "org.apache.jackrabbit.api.security.user.Authorizable",
      "org.apache.jackrabbit.api.security.user.UserManager",
      "org.apache.sling.api.resource.LoginException",
      "org.apache.sling.api.resource.Resource",
      "org.apache.sling.api.resource.ResourceResolver",
      "org.apache.sling.api.resource.ResourceResolverFactory",
      "org.apache.sling.jcr.resource.api.JcrResourceConstants",
      "org.osgi.service.component.ComponentContext",
      "org.slf4j.Logger",
      "org.slf4j.LoggerFactory",
      "com.day.cq.commons.Externalizer",
      "com.day.cq.dam.commons.util.DamUtil",
      "com.day.cq.workflow.WorkflowException",
      "com.day.cq.workflow.WorkflowSession",
      "com.day.cq.workflow.exec.WorkItem",
      "com.day.cq.workflow.exec.WorkflowData",
      "com.day.cq.workflow.exec.WorkflowProcess",
      "com.day.cq.workflow.metadata.MetaDataMap"
    ],
    "changes_summary": "Code changed as follows:\n--- buggy\n+++ fixed\n@@ -24,7 +24,7 @@\n \n import javax.jcr.RepositoryException;\n \n-import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.felix.scr.annotations.Activate;\n import org.apache.felix.scr.annotations.Component;\n import org.apache.felix.scr.annotations.Deactivate;"
  }
}