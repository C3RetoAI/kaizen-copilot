{
  "repo": {
    "name": "Adobe-Consulting-Services/acs-aem-commons",
    "buggy_commit": "a2cf90935d6166680ad85a9ac045e5060bf202ac",
    "fixed_commit": "be4c5995f48fb4b25d56d6b20485d28d62d76479"
  },
  "input": {
    "language": "Java",
    "issue": {
      "issue_title": "Reduce usage of Apache Commons Lang 2",
      "issue_description": "\r\nApache commons lang 2 is not maintained anymore since years. Usage of it should be replaced with Apache Commons Lang 3. Both libraries are part of AEM as a Cloud Service and AEM 6.x, only a change of the imports is required.\r\n\r\nThere is one exception, the usage of AEMs MailTemplate API which currently does not provide an alternative. Once that is available we can change the last remaining usage of Apache commons lang 2.\r\n\r\n\r\n\r\n"
    },
    "buggy_commit_message": "Merge branch 'Adobe-Consulting-Services:master' into master",
    "buggy_file": {
      "buggy_filename": "bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/options/RequestChecksumGeneratorOptions.java",
      "buggy_code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.adobe.acs.commons.analysis.jcrchecksum.impl.options;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.sling.api.SlingHttpServletRequest;\nimport org.apache.sling.api.request.RequestParameter;\nimport org.apache.sling.api.resource.Resource;\nimport org.apache.sling.api.resource.ResourceResolver;\n\nimport org.osgi.annotation.versioning.ProviderType;\n\n@ProviderType\npublic class RequestChecksumGeneratorOptions extends AbstractChecksumGeneratorOptions {\n\n    public RequestChecksumGeneratorOptions(SlingHttpServletRequest request)  {\n        this.addIncludedNodeTypes(request.getParameterValues(NODES_TYPES));\n        this.addExcludedNodeTypes(request.getParameterValues(NODE_TYPE_EXCLUDES));\n        this.addExcludedProperties(request.getParameterValues(PROPERTY_EXCLUDES));\n        this.addSortedProperties(request.getParameterValues(SORTED_PROPERTIES));\n    }\n\n    public static Set<String> getPaths(SlingHttpServletRequest request) throws IOException {\n        Set<String> paths = new HashSet<>();\n\n        // Add Paths\n\n        if (request.getParameterValues(PATHS) != null) {\n            String[] pathArr = request.getParameterValues(PATHS);\n            for (String path : pathArr) {\n                if (path.length() > 0) {\n                    paths.add(path);\n                }\n            }\n        }\n\n        paths.addAll(getPathsFromQuery(request.getResourceResolver(),\n                request.getParameter(QUERY_TYPE),\n                request.getParameter(QUERY)));\n\n        RequestParameter data = request.getRequestParameter(DATA);\n        if (data != null && data.getInputStream() != null) {\n            paths.addAll(getPathsFromInputstream(data.getInputStream(), request.getCharacterEncoding()));\n        }\n\n        return paths;\n    }\n\n    private static Set<String> getPathsFromQuery(ResourceResolver resourceResolver, String language, String query) {\n        if (StringUtils.isBlank(query)) {\n            return Collections.emptySet();\n        }\n\n        Set<String> paths = new HashSet<>();\n        language = StringUtils.defaultIfEmpty(language, \"xpath\");\n        Iterator<Resource> resources = resourceResolver.findResources(query, language);\n\n        while (resources.hasNext()) {\n            paths.add(resources.next().getPath());\n        }\n\n        return paths;\n    }\n\n    private static Set<String> getPathsFromInputstream(InputStream is, String encoding) throws IOException {\n        if (is == null) {\n            return Collections.emptySet();\n        }\n\n        Set<String> paths = new HashSet<>();\n        encoding = (encoding != null) ?  encoding : Charset.defaultCharset().name();\n\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(is, encoding))) {\n            String path;\n            while ((path = br.readLine()) != null) {\n                paths.add(path);\n            }\n        }\n\n        return paths;\n    }\n}"
    },
    "context": [],
    "unresolved_context": [
      "java.io.BufferedReader",
      "java.io.IOException",
      "java.io.InputStream",
      "java.io.InputStreamReader",
      "java.nio.charset.Charset",
      "java.util.Collections",
      "java.util.HashSet",
      "java.util.Iterator",
      "java.util.Set",
      "org.apache.commons.lang.StringUtils",
      "org.apache.sling.api.SlingHttpServletRequest",
      "org.apache.sling.api.request.RequestParameter",
      "org.apache.sling.api.resource.Resource",
      "org.apache.sling.api.resource.ResourceResolver",
      "org.osgi.annotation.versioning.ProviderType"
    ]
  },
  "output": {
    "language": "Java",
    "fixed_commit_message": "Reduce usage of Apache Commons Lang 2\nThis fixes #3408",
    "fixed_file": {
      "fixed_filename": "bundle/src/main/java/com/adobe/acs/commons/analysis/jcrchecksum/impl/options/RequestChecksumGeneratorOptions.java",
      "fixed_code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.adobe.acs.commons.analysis.jcrchecksum.impl.options;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.sling.api.SlingHttpServletRequest;\nimport org.apache.sling.api.request.RequestParameter;\nimport org.apache.sling.api.resource.Resource;\nimport org.apache.sling.api.resource.ResourceResolver;\n\nimport org.osgi.annotation.versioning.ProviderType;\n\n@ProviderType\npublic class RequestChecksumGeneratorOptions extends AbstractChecksumGeneratorOptions {\n\n    public RequestChecksumGeneratorOptions(SlingHttpServletRequest request)  {\n        this.addIncludedNodeTypes(request.getParameterValues(NODES_TYPES));\n        this.addExcludedNodeTypes(request.getParameterValues(NODE_TYPE_EXCLUDES));\n        this.addExcludedProperties(request.getParameterValues(PROPERTY_EXCLUDES));\n        this.addSortedProperties(request.getParameterValues(SORTED_PROPERTIES));\n    }\n\n    public static Set<String> getPaths(SlingHttpServletRequest request) throws IOException {\n        Set<String> paths = new HashSet<>();\n\n        // Add Paths\n\n        if (request.getParameterValues(PATHS) != null) {\n            String[] pathArr = request.getParameterValues(PATHS);\n            for (String path : pathArr) {\n                if (path.length() > 0) {\n                    paths.add(path);\n                }\n            }\n        }\n\n        paths.addAll(getPathsFromQuery(request.getResourceResolver(),\n                request.getParameter(QUERY_TYPE),\n                request.getParameter(QUERY)));\n\n        RequestParameter data = request.getRequestParameter(DATA);\n        if (data != null && data.getInputStream() != null) {\n            paths.addAll(getPathsFromInputstream(data.getInputStream(), request.getCharacterEncoding()));\n        }\n\n        return paths;\n    }\n\n    private static Set<String> getPathsFromQuery(ResourceResolver resourceResolver, String language, String query) {\n        if (StringUtils.isBlank(query)) {\n            return Collections.emptySet();\n        }\n\n        Set<String> paths = new HashSet<>();\n        language = StringUtils.defaultIfEmpty(language, \"xpath\");\n        Iterator<Resource> resources = resourceResolver.findResources(query, language);\n\n        while (resources.hasNext()) {\n            paths.add(resources.next().getPath());\n        }\n\n        return paths;\n    }\n\n    private static Set<String> getPathsFromInputstream(InputStream is, String encoding) throws IOException {\n        if (is == null) {\n            return Collections.emptySet();\n        }\n\n        Set<String> paths = new HashSet<>();\n        encoding = (encoding != null) ?  encoding : Charset.defaultCharset().name();\n\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(is, encoding))) {\n            String path;\n            while ((path = br.readLine()) != null) {\n                paths.add(path);\n            }\n        }\n\n        return paths;\n    }\n}"
    },
    "context": [],
    "unresolved_context": [
      "java.io.BufferedReader",
      "java.io.IOException",
      "java.io.InputStream",
      "java.io.InputStreamReader",
      "java.nio.charset.Charset",
      "java.util.Collections",
      "java.util.HashSet",
      "java.util.Iterator",
      "java.util.Set",
      "org.apache.commons.lang3.StringUtils",
      "org.apache.sling.api.SlingHttpServletRequest",
      "org.apache.sling.api.request.RequestParameter",
      "org.apache.sling.api.resource.Resource",
      "org.apache.sling.api.resource.ResourceResolver",
      "org.osgi.annotation.versioning.ProviderType"
    ],
    "changes_summary": "Code changed as follows:\n--- buggy\n+++ fixed\n@@ -28,7 +28,7 @@\n import java.util.Iterator;\n import java.util.Set;\n \n-import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.sling.api.SlingHttpServletRequest;\n import org.apache.sling.api.request.RequestParameter;\n import org.apache.sling.api.resource.Resource;"
  }
}