{
  "repo": {
    "name": "3Hren/blackhole",
    "buggy_commit": "9ddfddd6896238fb925179788e3bc1ff75f1fb0d",
    "fixed_commit": "53f039481a338f5653c5b8b0253577daa24b7a2b"
  },
  "input": {
    "language": "C++",
    "issue": {
      "issue_title": "Unformatted message field in JSON formatter",
      "issue_description": "For example:\n\n``` json\n{\n  \"message\":\"stopping {:d} execution unit(s)\",\n  \"severity\":1,\n  \"timestamp\":1454064629638488,\n  \"source\":\"core\"\n}\n```\n\nWhere \"message\" field should be formatted.\n"
    },
    "buggy_commit_message": "changelog: update",
    "buggy_file": {
      "buggy_filename": "tests/formatter/json.cpp",
      "buggy_code": "#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n\n#include <rapidjson/document.h>\n\n#include <blackhole/attribute.hpp>\n#include <blackhole/attributes.hpp>\n#include <blackhole/cpp17/string_view.hpp>\n#include <blackhole/extensions/writer.hpp>\n#include <blackhole/formatter/json.hpp>\n#include <blackhole/record.hpp>\n\nnamespace {\n\nstruct endpoint_t {\n    std::string host;\n    std::uint16_t port;\n};\n\n}  // namespace\n\nnamespace blackhole {\ninline namespace v1 {\n\ntemplate<>\nstruct display_traits<endpoint_t> {\n    static auto apply(const endpoint_t& endpoint, writer_t& wr) -> void {\n        wr.write(\"{}:{}\", endpoint.host, endpoint.port);\n    }\n};\n\n}  // namespace v1\n}  // namespace blackhole\n\nnamespace blackhole {\nnamespace testing {\nnamespace formatter {\n\nusing ::blackhole::formatter::json_t;\n\nTEST(json_t, FormatMessage) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n}\n\nTEST(json_t, FormatSeverity) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(4, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n\n    ASSERT_TRUE(doc.HasMember(\"severity\"));\n    ASSERT_TRUE(doc[\"severity\"].IsInt());\n    EXPECT_EQ(4, doc[\"severity\"].GetInt());\n}\n\nTEST(json_t, FormatTimestamp) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(4, message, pack);\n    record.activate();\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n\n    ASSERT_TRUE(doc.HasMember(\"timestamp\"));\n    ASSERT_TRUE(doc[\"timestamp\"].IsUint64());\n    EXPECT_TRUE(doc[\"timestamp\"].GetUint64() > 0);\n}\n\nTEST(json_t, FormatAttribute) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"counter\", 42}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"counter\"));\n    ASSERT_TRUE(doc[\"counter\"].IsInt());\n    EXPECT_EQ(42, doc[\"counter\"].GetInt());\n}\n\nTEST(json_t, FormatAttributeNull) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", nullptr}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"endpoint\"].IsNull());\n}\n\nTEST(json_t, FormatAttributeBool) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"available\", true}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"available\"));\n    ASSERT_TRUE(doc[\"available\"].IsBool());\n    EXPECT_TRUE(doc[\"available\"].GetBool());\n}\n\nTEST(json_t, FormatAttributeDouble) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"pi\", 3.1415}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"pi\"));\n    ASSERT_TRUE(doc[\"pi\"].IsDouble());\n    EXPECT_DOUBLE_EQ(3.1415, doc[\"pi\"].GetDouble());\n}\n\nTEST(json_t, FormatAttributeString) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", \"127.0.0.1:8080\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatAttributeUser) {\n    endpoint_t endpoint{\"127.0.0.1\", 8080};\n\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", endpoint}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatDuplicateAttributesDefault) {\n    auto formatter = json_t::builder_t()\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list a1{{\"counter\", 42}};\n    const attribute_list a2{{\"counter\", 100}};\n    const attribute_pack pack{a1, a2};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"counter\"));\n    ASSERT_TRUE(doc[\"counter\"].IsInt());\n    EXPECT_EQ(42, doc[\"counter\"].GetInt());\n\n    EXPECT_TRUE(writer.result().to_string().find(\"\\\"counter\\\":42\") != std::string::npos);\n    EXPECT_TRUE(writer.result().to_string().find(\"\\\"counter\\\":100\") != std::string::npos);\n}\n\nTEST(json_t, FormatDuplicateAttributesUnique) {\n    auto formatter = json_t::builder_t()\n        .unique()\n        .build();\n\n    const string_view message(\"value\");\n    // Earlier attribute list has more precedence than the later ones.\n    const attribute_list a1{{\"counter\", 42}};\n    const attribute_list a2{{\"counter\", 100}};\n    const attribute_pack pack{a1, a2};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"counter\"));\n    ASSERT_TRUE(doc[\"counter\"].IsInt());\n    EXPECT_EQ(42, doc[\"counter\"].GetInt());\n\n    EXPECT_TRUE(writer.result().to_string().find(\"\\\"counter\\\":42\") != std::string::npos);\n    EXPECT_TRUE(writer.result().to_string().find(\"\\\"counter\\\":100\") == std::string::npos);\n}\n\nTEST(json_t, FormatMessageWithRouting) {\n    auto formatter = json_t::builder_t()\n        .route(\"/fields\", {\"message\"})\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"fields\"));\n    ASSERT_TRUE(doc[\"fields\"].HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"fields\"][\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"fields\"][\"message\"].GetString());\n}\n\nTEST(json_t, FormatAttributeStringWithRouting) {\n    auto formatter = json_t::builder_t()\n        .route(\"/fields\", {\"endpoint\"})\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", \"127.0.0.1:8080\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"fields\"));\n    ASSERT_TRUE(doc[\"fields\"].HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"fields\"][\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"fields\"][\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatAttributeStringWithNestedRouting) {\n    auto formatter = json_t::builder_t()\n        .route(\"/fields/external\", {\"endpoint\"})\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", \"127.0.0.1:8080\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"fields\"));\n    ASSERT_TRUE(doc[\"fields\"].HasMember(\"external\"));\n    ASSERT_TRUE(doc[\"fields\"][\"external\"].IsObject());\n    ASSERT_TRUE(doc[\"fields\"][\"external\"].HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"fields\"][\"external\"][\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"fields\"][\"external\"][\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatAttributeStringWithRootRouting) {\n    auto formatter = json_t::builder_t()\n        .route(\"\", {\"endpoint\"})\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", \"127.0.0.1:8080\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatMessageWithRenaming) {\n    auto formatter = json_t::builder_t()\n        .rename(\"message\", \"#message\")\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"#message\"));\n    ASSERT_TRUE(doc[\"#message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"#message\"].GetString());\n}\n\nTEST(json_t, FormatAttributeWithRenaming) {\n    auto formatter = json_t::builder_t()\n        .rename(\"source\", \"#source\")\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"source\", \"storage\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"#source\"));\n    ASSERT_TRUE(doc[\"#source\"].IsString());\n    EXPECT_STREQ(\"storage\", doc[\"#source\"].GetString());\n}\n\nTEST(json_t, FactoryType) {\n    EXPECT_EQ(\"json\", std::string(factory<formatter::json_t>::type()));\n}\n\n}  // namespace formatter\n}  // namespace testing\n}  // namespace blackhole\n"
    },
    "context": [],
    "unresolved_context": []
  },
  "output": {
    "language": "C++",
    "fixed_commit_message": "fix(formatter/json): fix message field\n\nThis commit fixes a bug where message attribute\u2019s value was left\nunformatted.\n\nCloses #89.",
    "fixed_file": {
      "fixed_filename": "tests/formatter/json.cpp",
      "fixed_code": "#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n\n#include <rapidjson/document.h>\n\n#include <blackhole/attribute.hpp>\n#include <blackhole/attributes.hpp>\n#include <blackhole/cpp17/string_view.hpp>\n#include <blackhole/extensions/writer.hpp>\n#include <blackhole/formatter/json.hpp>\n#include <blackhole/record.hpp>\n\nnamespace {\n\nstruct endpoint_t {\n    std::string host;\n    std::uint16_t port;\n};\n\n}  // namespace\n\nnamespace blackhole {\ninline namespace v1 {\n\ntemplate<>\nstruct display_traits<endpoint_t> {\n    static auto apply(const endpoint_t& endpoint, writer_t& wr) -> void {\n        wr.write(\"{}:{}\", endpoint.host, endpoint.port);\n    }\n};\n\n}  // namespace v1\n}  // namespace blackhole\n\nnamespace blackhole {\nnamespace testing {\nnamespace formatter {\n\nusing ::blackhole::formatter::json_t;\n\nTEST(json_t, FormatMessage) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n}\n\nTEST(json_t, FormatFormattedMessage) {\n    json_t formatter;\n\n    const string_view message(\"value {}\");\n    const attribute_pack pack;\n    record_t record(0, message, pack);\n    record.activate(\"value 42\");\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value 42\", doc[\"message\"].GetString());\n}\n\nTEST(json_t, FormatSeverity) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(4, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n\n    ASSERT_TRUE(doc.HasMember(\"severity\"));\n    ASSERT_TRUE(doc[\"severity\"].IsInt());\n    EXPECT_EQ(4, doc[\"severity\"].GetInt());\n}\n\nTEST(json_t, FormatTimestamp) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(4, message, pack);\n    record.activate();\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n\n    ASSERT_TRUE(doc.HasMember(\"timestamp\"));\n    ASSERT_TRUE(doc[\"timestamp\"].IsUint64());\n    EXPECT_TRUE(doc[\"timestamp\"].GetUint64() > 0);\n}\n\nTEST(json_t, FormatAttribute) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"counter\", 42}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"counter\"));\n    ASSERT_TRUE(doc[\"counter\"].IsInt());\n    EXPECT_EQ(42, doc[\"counter\"].GetInt());\n}\n\nTEST(json_t, FormatAttributeNull) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", nullptr}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"endpoint\"].IsNull());\n}\n\nTEST(json_t, FormatAttributeBool) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"available\", true}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"available\"));\n    ASSERT_TRUE(doc[\"available\"].IsBool());\n    EXPECT_TRUE(doc[\"available\"].GetBool());\n}\n\nTEST(json_t, FormatAttributeDouble) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"pi\", 3.1415}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"pi\"));\n    ASSERT_TRUE(doc[\"pi\"].IsDouble());\n    EXPECT_DOUBLE_EQ(3.1415, doc[\"pi\"].GetDouble());\n}\n\nTEST(json_t, FormatAttributeString) {\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", \"127.0.0.1:8080\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatAttributeUser) {\n    endpoint_t endpoint{\"127.0.0.1\", 8080};\n\n    json_t formatter;\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", endpoint}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatDuplicateAttributesDefault) {\n    auto formatter = json_t::builder_t()\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list a1{{\"counter\", 42}};\n    const attribute_list a2{{\"counter\", 100}};\n    const attribute_pack pack{a1, a2};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"counter\"));\n    ASSERT_TRUE(doc[\"counter\"].IsInt());\n    EXPECT_EQ(42, doc[\"counter\"].GetInt());\n\n    EXPECT_TRUE(writer.result().to_string().find(\"\\\"counter\\\":42\") != std::string::npos);\n    EXPECT_TRUE(writer.result().to_string().find(\"\\\"counter\\\":100\") != std::string::npos);\n}\n\nTEST(json_t, FormatDuplicateAttributesUnique) {\n    auto formatter = json_t::builder_t()\n        .unique()\n        .build();\n\n    const string_view message(\"value\");\n    // Earlier attribute list has more precedence than the later ones.\n    const attribute_list a1{{\"counter\", 42}};\n    const attribute_list a2{{\"counter\", 100}};\n    const attribute_pack pack{a1, a2};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n\n    ASSERT_TRUE(doc.HasMember(\"counter\"));\n    ASSERT_TRUE(doc[\"counter\"].IsInt());\n    EXPECT_EQ(42, doc[\"counter\"].GetInt());\n\n    EXPECT_TRUE(writer.result().to_string().find(\"\\\"counter\\\":42\") != std::string::npos);\n    EXPECT_TRUE(writer.result().to_string().find(\"\\\"counter\\\":100\") == std::string::npos);\n}\n\nTEST(json_t, FormatMessageWithRouting) {\n    auto formatter = json_t::builder_t()\n        .route(\"/fields\", {\"message\"})\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"fields\"));\n    ASSERT_TRUE(doc[\"fields\"].HasMember(\"message\"));\n    ASSERT_TRUE(doc[\"fields\"][\"message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"fields\"][\"message\"].GetString());\n}\n\nTEST(json_t, FormatAttributeStringWithRouting) {\n    auto formatter = json_t::builder_t()\n        .route(\"/fields\", {\"endpoint\"})\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", \"127.0.0.1:8080\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"fields\"));\n    ASSERT_TRUE(doc[\"fields\"].HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"fields\"][\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"fields\"][\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatAttributeStringWithNestedRouting) {\n    auto formatter = json_t::builder_t()\n        .route(\"/fields/external\", {\"endpoint\"})\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", \"127.0.0.1:8080\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"fields\"));\n    ASSERT_TRUE(doc[\"fields\"].HasMember(\"external\"));\n    ASSERT_TRUE(doc[\"fields\"][\"external\"].IsObject());\n    ASSERT_TRUE(doc[\"fields\"][\"external\"].HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"fields\"][\"external\"][\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"fields\"][\"external\"][\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatAttributeStringWithRootRouting) {\n    auto formatter = json_t::builder_t()\n        .route(\"\", {\"endpoint\"})\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"endpoint\", \"127.0.0.1:8080\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"endpoint\"));\n    ASSERT_TRUE(doc[\"endpoint\"].IsString());\n    EXPECT_STREQ(\"127.0.0.1:8080\", doc[\"endpoint\"].GetString());\n}\n\nTEST(json_t, FormatMessageWithRenaming) {\n    auto formatter = json_t::builder_t()\n        .rename(\"message\", \"#message\")\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_pack pack;\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"#message\"));\n    ASSERT_TRUE(doc[\"#message\"].IsString());\n    EXPECT_STREQ(\"value\", doc[\"#message\"].GetString());\n}\n\nTEST(json_t, FormatAttributeWithRenaming) {\n    auto formatter = json_t::builder_t()\n        .rename(\"source\", \"#source\")\n        .build();\n\n    const string_view message(\"value\");\n    const attribute_list attributes{{\"source\", \"storage\"}};\n    const attribute_pack pack{attributes};\n    record_t record(0, message, pack);\n    writer_t writer;\n    formatter.format(record, writer);\n\n    rapidjson::Document doc;\n    doc.Parse<0>(writer.result().to_string().c_str());\n    ASSERT_TRUE(doc.HasMember(\"#source\"));\n    ASSERT_TRUE(doc[\"#source\"].IsString());\n    EXPECT_STREQ(\"storage\", doc[\"#source\"].GetString());\n}\n\nTEST(json_t, FactoryType) {\n    EXPECT_EQ(\"json\", std::string(factory<formatter::json_t>::type()));\n}\n\n}  // namespace formatter\n}  // namespace testing\n}  // namespace blackhole\n"
    },
    "context": [],
    "unresolved_context": [],
    "changes_summary": "Code changed as follows:\n--- buggy\n+++ fixed\n@@ -54,6 +54,23 @@\n     EXPECT_STREQ(\"value\", doc[\"message\"].GetString());\n }\n \n+TEST(json_t, FormatFormattedMessage) {\n+    json_t formatter;\n+\n+    const string_view message(\"value {}\");\n+    const attribute_pack pack;\n+    record_t record(0, message, pack);\n+    record.activate(\"value 42\");\n+    writer_t writer;\n+    formatter.format(record, writer);\n+\n+    rapidjson::Document doc;\n+    doc.Parse<0>(writer.result().to_string().c_str());\n+    ASSERT_TRUE(doc.HasMember(\"message\"));\n+    ASSERT_TRUE(doc[\"message\"].IsString());\n+    EXPECT_STREQ(\"value 42\", doc[\"message\"].GetString());\n+}\n+\n TEST(json_t, FormatSeverity) {\n     json_t formatter;\n "
  }
}