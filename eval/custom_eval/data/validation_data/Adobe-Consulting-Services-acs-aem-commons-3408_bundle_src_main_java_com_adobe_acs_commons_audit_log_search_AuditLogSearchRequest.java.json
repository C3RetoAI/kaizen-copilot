{
  "repo": {
    "name": "Adobe-Consulting-Services/acs-aem-commons",
    "buggy_commit": "a2cf90935d6166680ad85a9ac045e5060bf202ac",
    "fixed_commit": "be4c5995f48fb4b25d56d6b20485d28d62d76479"
  },
  "input": {
    "language": "Java",
    "issue": {
      "issue_title": "Reduce usage of Apache Commons Lang 2",
      "issue_description": "\r\nApache commons lang 2 is not maintained anymore since years. Usage of it should be replaced with Apache Commons Lang 3. Both libraries are part of AEM as a Cloud Service and AEM 6.x, only a change of the imports is required.\r\n\r\nThere is one exception, the usage of AEMs MailTemplate API which currently does not provide an alternative. Once that is available we can change the last remaining usage of Apache commons lang 2.\r\n\r\n\r\n\r\n"
    },
    "buggy_commit_message": "Merge branch 'Adobe-Consulting-Services:master' into master",
    "buggy_file": {
      "buggy_filename": "bundle/src/main/java/com/adobe/acs/commons/audit_log_search/AuditLogSearchRequest.java",
      "buggy_code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.adobe.acs.commons.audit_log_search;\n\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.TimeZone;\n\nimport javax.jcr.RepositoryException;\nimport javax.jcr.UnsupportedRepositoryOperationException;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang3.time.FastDateFormat;\nimport org.apache.jackrabbit.api.security.user.Authorizable;\nimport org.apache.jackrabbit.api.security.user.UserManager;\nimport org.apache.sling.api.SlingHttpServletRequest;\nimport org.apache.sling.api.resource.ResourceResolver;\n\nimport com.adobe.granite.security.user.UserProperties;\nimport com.adobe.granite.security.user.UserPropertiesManager;\nimport com.adobe.granite.security.user.UserPropertiesService;\n\n/**\n * Simple POJO for audit log requests. Handles some of the crufty code around\n * loading and generating the query.\n */\npublic class AuditLogSearchRequest {\n\n    private static final FastDateFormat HTML5_DATETIME_FORMAT = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm\", TimeZone.getTimeZone(\"GMT\"));\n    private static final FastDateFormat QUERY_DATE_FORMAT = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\", TimeZone.getTimeZone(\"GMT\"));\n\n    private static String getJcrSqlDate(Date date) {\n        return QUERY_DATE_FORMAT.format(date) + \".000Z\";\n    }\n\n    private final String contentRoot;\n    private final boolean includeChildren;\n    private final String type;\n    private final String user;\n    private final Date startDate;\n    private final Date endDate;\n    private final String order;\n    private Map<String, String> userNames = new HashMap<String, String>();\n\n    private Map<String, String> userPaths = new HashMap<String, String>();\n\n    /**\n     * Constructs a new AuditLogSearchRequest from the SlingHttpServletRequest\n     *\n     * @param request\n     *            yep, that's a request... guess what it does\n     * @throws ParseException\n     *             an exception occurred parsing the start / end date\n     */\n    public AuditLogSearchRequest(SlingHttpServletRequest request) throws ParseException {\n        contentRoot = request.getParameter(\"contentRoot\");\n        includeChildren = \"true\".equals(request.getParameter(\"includeChildren\"));\n        type = request.getParameter(\"type\");\n        user = request.getParameter(\"user\");\n        startDate = loadDate(request.getParameter(\"startDate\"));\n        endDate = loadDate(request.getParameter(\"endDate\"));\n        order = request.getParameter(\"order\");\n    }\n\n    public String getContentRoot() {\n        return contentRoot;\n    }\n\n    public Date getEndDate() {\n        return Optional.ofNullable(endDate)\n                .map(date -> (Date) date.clone())\n                .orElse(null);\n    }\n\n    public String getOrder() {\n        return order;\n    }\n\n    public String getQueryParameters() {\n        List<String> expressions = new ArrayList<String>();\n\n        if (!StringUtils.isEmpty(type)) {\n            expressions.add(\"[cq:type]='\" + StringEscapeUtils.escapeSql(type) + \"'\");\n        }\n        if (!StringUtils.isEmpty(user)) {\n            expressions.add(\"[cq:userid]='\" + StringEscapeUtils.escapeSql(user) + \"'\");\n        }\n        if (StringUtils.isNotEmpty(contentRoot)) {\n            if (includeChildren) {\n                expressions.add(\"[cq:path] LIKE '\" + StringEscapeUtils.escapeSql(contentRoot) + \"%'\");\n            } else {\n                expressions.add(\"[cq:path]='\" + StringEscapeUtils.escapeSql(contentRoot) + \"'\");\n            }\n        }\n        if (startDate != null) {\n            expressions.add(\"[cq:time] > CAST('\" + getJcrSqlDate(startDate) + \"' AS DATE)\");\n        }\n        if (endDate != null) {\n            expressions.add(\"[cq:time] < CAST('\" + getJcrSqlDate(endDate) + \"' AS DATE)\");\n        }\n        String query = StringUtils.join(expressions, \" AND \");\n        if (!StringUtils.isEmpty(order)) {\n            query += \" ORDER BY \" + order;\n        }\n        return query;\n    }\n\n    public Date getStartDate() {\n        return Optional.ofNullable(startDate)\n                .map(date -> (Date) date.clone())\n                .orElse(null);\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public String getUser() {\n        return user;\n    }\n\n    public String getUserName(ResourceResolver resolver, String userId) throws RepositoryException {\n        if (!userNames.containsKey(userId)) {\n            final UserPropertiesManager upm = resolver.adaptTo(UserPropertiesManager.class);\n            UserProperties userProperties = upm.getUserProperties(userId, UserPropertiesService.PRIVATE_PROFILE);\n            String name = userId;\n            if (userProperties != null && !StringUtils.isEmpty(userProperties.getDisplayName())) {\n                name = userProperties.getDisplayName();\n            }\n            userNames.put(userId, name);\n        }\n        return userNames.get(userId);\n    }\n\n    public String getUserPath(ResourceResolver resolver, String userId)\n            throws UnsupportedRepositoryOperationException, RepositoryException {\n        if (!userPaths.containsKey(userId)) {\n            final UserManager userManager = resolver.adaptTo(UserManager.class);\n            if (userManager != null) {\n                final Authorizable usr = userManager.getAuthorizable(userId);\n                if (usr != null) {\n                    userPaths.put(userId, usr.getPath());\n                }\n            }\n        }\n        return userPaths.get(userId);\n    }\n\n    public boolean isIncludehildren() {\n        return includeChildren;\n    }\n\n    private Date loadDate(String dateStr) throws ParseException {\n        Date date = null;\n        if (!StringUtils.isEmpty(dateStr)) {\n            date = HTML5_DATETIME_FORMAT.parse(dateStr);\n        }\n        return date;\n    }\n\n    @Override\n    public String toString() {\n        return \"AuditLogSearchRequest [contentRoot=\" + contentRoot + \", includeChildren=\" + includeChildren + \", type=\"\n                + type + \", user=\" + user + \", startDate=\" + startDate + \", endDate=\" + endDate + \", order=\" + order\n                + \", userNames=\" + userNames + \", userPaths=\" + userPaths + \"]\";\n    }\n\n}\n"
    },
    "context": [],
    "unresolved_context": [
      "java.text.ParseException",
      "java.util.ArrayList",
      "java.util.Date",
      "java.util.HashMap",
      "java.util.List",
      "java.util.Map",
      "java.util.Optional",
      "java.util.TimeZone",
      "javax.jcr.RepositoryException",
      "javax.jcr.UnsupportedRepositoryOperationException",
      "org.apache.commons.lang.StringEscapeUtils",
      "org.apache.commons.lang.StringUtils",
      "org.apache.commons.lang3.time.FastDateFormat",
      "org.apache.jackrabbit.api.security.user.Authorizable",
      "org.apache.jackrabbit.api.security.user.UserManager",
      "org.apache.sling.api.SlingHttpServletRequest",
      "org.apache.sling.api.resource.ResourceResolver",
      "com.adobe.granite.security.user.UserProperties",
      "com.adobe.granite.security.user.UserPropertiesManager",
      "com.adobe.granite.security.user.UserPropertiesService"
    ]
  },
  "output": {
    "language": "Java",
    "fixed_commit_message": "Reduce usage of Apache Commons Lang 2\nThis fixes #3408",
    "fixed_file": {
      "fixed_filename": "bundle/src/main/java/com/adobe/acs/commons/audit_log_search/AuditLogSearchRequest.java",
      "fixed_code": "/*\n * ACS AEM Commons\n *\n * Copyright (C) 2013 - 2023 Adobe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.adobe.acs.commons.audit_log_search;\n\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.TimeZone;\n\nimport javax.jcr.RepositoryException;\nimport javax.jcr.UnsupportedRepositoryOperationException;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.time.FastDateFormat;\nimport org.apache.jackrabbit.api.security.user.Authorizable;\nimport org.apache.jackrabbit.api.security.user.UserManager;\nimport org.apache.sling.api.SlingHttpServletRequest;\nimport org.apache.sling.api.resource.ResourceResolver;\n\nimport com.adobe.granite.security.user.UserProperties;\nimport com.adobe.granite.security.user.UserPropertiesManager;\nimport com.adobe.granite.security.user.UserPropertiesService;\n\n/**\n * Simple POJO for audit log requests. Handles some of the crufty code around\n * loading and generating the query.\n */\npublic class AuditLogSearchRequest {\n\n    private static final FastDateFormat HTML5_DATETIME_FORMAT = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm\", TimeZone.getTimeZone(\"GMT\"));\n    private static final FastDateFormat QUERY_DATE_FORMAT = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\", TimeZone.getTimeZone(\"GMT\"));\n\n    private static String getJcrSqlDate(Date date) {\n        return QUERY_DATE_FORMAT.format(date) + \".000Z\";\n    }\n\n    private final String contentRoot;\n    private final boolean includeChildren;\n    private final String type;\n    private final String user;\n    private final Date startDate;\n    private final Date endDate;\n    private final String order;\n    private Map<String, String> userNames = new HashMap<String, String>();\n\n    private Map<String, String> userPaths = new HashMap<String, String>();\n\n    /**\n     * Constructs a new AuditLogSearchRequest from the SlingHttpServletRequest\n     *\n     * @param request\n     *            yep, that's a request... guess what it does\n     * @throws ParseException\n     *             an exception occurred parsing the start / end date\n     */\n    public AuditLogSearchRequest(SlingHttpServletRequest request) throws ParseException {\n        contentRoot = request.getParameter(\"contentRoot\");\n        includeChildren = \"true\".equals(request.getParameter(\"includeChildren\"));\n        type = request.getParameter(\"type\");\n        user = request.getParameter(\"user\");\n        startDate = loadDate(request.getParameter(\"startDate\"));\n        endDate = loadDate(request.getParameter(\"endDate\"));\n        order = request.getParameter(\"order\");\n    }\n\n    public String getContentRoot() {\n        return contentRoot;\n    }\n\n    public Date getEndDate() {\n        return Optional.ofNullable(endDate)\n                .map(date -> (Date) date.clone())\n                .orElse(null);\n    }\n\n    public String getOrder() {\n        return order;\n    }\n\n    public String getQueryParameters() {\n        List<String> expressions = new ArrayList<String>();\n\n        if (!StringUtils.isEmpty(type)) {\n            expressions.add(\"[cq:type]='\" + StringUtils.replace(type, \"'\", \"''\") + \"'\");\n        }\n        if (!StringUtils.isEmpty(user)) {\n            expressions.add(\"[cq:userid]='\" + StringUtils.replace(user, \"'\", \"''\") + \"'\");\n        }\n        if (StringUtils.isNotEmpty(contentRoot)) {\n            if (includeChildren) {\n                expressions.add(\"[cq:path] LIKE '\" + StringUtils.replace(contentRoot, \"'\", \"''\") + \"%'\");\n            } else {\n                expressions.add(\"[cq:path]='\" + StringUtils.replace(contentRoot, \"'\", \"''\") + \"'\");\n            }\n        }\n        if (startDate != null) {\n            expressions.add(\"[cq:time] > CAST('\" + getJcrSqlDate(startDate) + \"' AS DATE)\");\n        }\n        if (endDate != null) {\n            expressions.add(\"[cq:time] < CAST('\" + getJcrSqlDate(endDate) + \"' AS DATE)\");\n        }\n        String query = StringUtils.join(expressions, \" AND \");\n        if (!StringUtils.isEmpty(order)) {\n            query += \" ORDER BY \" + order;\n        }\n        return query;\n    }\n\n    public Date getStartDate() {\n        return Optional.ofNullable(startDate)\n                .map(date -> (Date) date.clone())\n                .orElse(null);\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public String getUser() {\n        return user;\n    }\n\n    public String getUserName(ResourceResolver resolver, String userId) throws RepositoryException {\n        if (!userNames.containsKey(userId)) {\n            final UserPropertiesManager upm = resolver.adaptTo(UserPropertiesManager.class);\n            UserProperties userProperties = upm.getUserProperties(userId, UserPropertiesService.PRIVATE_PROFILE);\n            String name = userId;\n            if (userProperties != null && !StringUtils.isEmpty(userProperties.getDisplayName())) {\n                name = userProperties.getDisplayName();\n            }\n            userNames.put(userId, name);\n        }\n        return userNames.get(userId);\n    }\n\n    public String getUserPath(ResourceResolver resolver, String userId)\n            throws UnsupportedRepositoryOperationException, RepositoryException {\n        if (!userPaths.containsKey(userId)) {\n            final UserManager userManager = resolver.adaptTo(UserManager.class);\n            if (userManager != null) {\n                final Authorizable usr = userManager.getAuthorizable(userId);\n                if (usr != null) {\n                    userPaths.put(userId, usr.getPath());\n                }\n            }\n        }\n        return userPaths.get(userId);\n    }\n\n    public boolean isIncludehildren() {\n        return includeChildren;\n    }\n\n    private Date loadDate(String dateStr) throws ParseException {\n        Date date = null;\n        if (!StringUtils.isEmpty(dateStr)) {\n            date = HTML5_DATETIME_FORMAT.parse(dateStr);\n        }\n        return date;\n    }\n\n    @Override\n    public String toString() {\n        return \"AuditLogSearchRequest [contentRoot=\" + contentRoot + \", includeChildren=\" + includeChildren + \", type=\"\n                + type + \", user=\" + user + \", startDate=\" + startDate + \", endDate=\" + endDate + \", order=\" + order\n                + \", userNames=\" + userNames + \", userPaths=\" + userPaths + \"]\";\n    }\n\n}\n"
    },
    "context": [],
    "unresolved_context": [
      "java.text.ParseException",
      "java.util.ArrayList",
      "java.util.Date",
      "java.util.HashMap",
      "java.util.List",
      "java.util.Map",
      "java.util.Optional",
      "java.util.TimeZone",
      "javax.jcr.RepositoryException",
      "javax.jcr.UnsupportedRepositoryOperationException",
      "org.apache.commons.lang3.StringUtils",
      "org.apache.commons.lang3.time.FastDateFormat",
      "org.apache.jackrabbit.api.security.user.Authorizable",
      "org.apache.jackrabbit.api.security.user.UserManager",
      "org.apache.sling.api.SlingHttpServletRequest",
      "org.apache.sling.api.resource.ResourceResolver",
      "com.adobe.granite.security.user.UserProperties",
      "com.adobe.granite.security.user.UserPropertiesManager",
      "com.adobe.granite.security.user.UserPropertiesService"
    ],
    "changes_summary": "Code changed as follows:\n--- buggy\n+++ fixed\n@@ -29,8 +29,7 @@\n import javax.jcr.RepositoryException;\n import javax.jcr.UnsupportedRepositoryOperationException;\n \n-import org.apache.commons.lang.StringEscapeUtils;\n-import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.jackrabbit.api.security.user.Authorizable;\n import org.apache.jackrabbit.api.security.user.UserManager;\n@@ -101,16 +100,16 @@\n         List<String> expressions = new ArrayList<String>();\n \n         if (!StringUtils.isEmpty(type)) {\n-            expressions.add(\"[cq:type]='\" + StringEscapeUtils.escapeSql(type) + \"'\");\n+            expressions.add(\"[cq:type]='\" + StringUtils.replace(type, \"'\", \"''\") + \"'\");\n         }\n         if (!StringUtils.isEmpty(user)) {\n-            expressions.add(\"[cq:userid]='\" + StringEscapeUtils.escapeSql(user) + \"'\");\n+            expressions.add(\"[cq:userid]='\" + StringUtils.replace(user, \"'\", \"''\") + \"'\");\n         }\n         if (StringUtils.isNotEmpty(contentRoot)) {\n             if (includeChildren) {\n-                expressions.add(\"[cq:path] LIKE '\" + StringEscapeUtils.escapeSql(contentRoot) + \"%'\");\n+                expressions.add(\"[cq:path] LIKE '\" + StringUtils.replace(contentRoot, \"'\", \"''\") + \"%'\");\n             } else {\n-                expressions.add(\"[cq:path]='\" + StringEscapeUtils.escapeSql(contentRoot) + \"'\");\n+                expressions.add(\"[cq:path]='\" + StringUtils.replace(contentRoot, \"'\", \"''\") + \"'\");\n             }\n         }\n         if (startDate != null) {"
  }
}